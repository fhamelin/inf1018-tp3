/**
 *
 * This is a bugfix of the grammar written by Sriram Sankar for Java 1.1,
 * modified by David Williamns for Java 1.2, by Andrea Gini for Java 1.4
 * and finally by Marco Savard to include a missing construct.
 *
 * According wiht the Java Language Sytax Specification, rules Classbody,
 * ClassBodyDeclarations, InterfaceBody and InterfaceBodyDeclarations, you
 * can put any number of semicolon between any production you can find
 * inside a class or an interface. These extra semicolons must be treated
 * in a different way from semicolons that concludes some production
 * (like abstract method declarations or field declarations), because the
 * latter are mandatory. So I removed the modification previously added
 * by Marco Savard to the production FieldDeclaration() (duplication of ";")
 * and added ";" as an optional derivation inside ClassBodyDeclaration() and
 * InterfaceBodyDeclaration(), in a way that mimic the official 
 * Java Grammar, that can be found at the following adress:
 * http://java.sun.com/docs/books/jls/second_edition/html/syntax.doc.html 
 *
 * As an informal proof of correctness, now this grammar accepts all the 3887
 * files of the JDK1.4 API.
 *
 * Thanks to Marco Savard for having pointed out the problem.
 *
 * To track changes, search for the string "// added by Andrea Gini2"
 *
 * Andrea Gini, 05/05/2002
 * ginian@tiscali.it
 *
 *====================================================================
 *
 * According the point #19 of the java 1.2 compatibility document of Sun
 * (http://java.sun.com/products/jdk/1.2/compatibility.html), the following
 * construct is valid since java 1.2 : 
 * 
 * class D extends C {
 *   void f() {
 *   // overrides f() to run it in a new thread
 *       new Thread(new Runnable() {
 *           public void run() {
 *	        D.super.f();
 *	    }
 *	 }).start();
 *    }
 * }
 *
 * Unfortunely, this was not supported by the previous grammar. So 
 * I have adapted the grammar in order to support it. 
 *
 * To track changes, search for the string "Modified by Marco Savard"
 *
 * Marco Savard, 28/03/2002
 * marco.savard@magna-solutions.de
 *
 * ==================================================================
 *
 * This is a modified version of the grammar written by Sriram Sankar for Java 1.1
 * and modified by David Williamns for Java 1.2. It has been modified to accept Java
 * sources for Java 1.4. The grammar have been modified in four parts: <br> 
 * 1) 'assert' has been included to the keyword list<br>
 * 2) AssertStatement() production has been added<br>
 * 3) the production Statement() has been modified in order to support AssertStatement()<br>
 * 4) in the main the string "for Java1.2 code" has been changed with "for Java1.4 code"<br>
 *
 * To track changes, search for the string "// added by Andrea Gini"
 *
 * Andrea Gini, 24/02/2002
 * ginian@tiscali.it
 *
 * ==================================================================
 *
 * This file is a modified version of one originally found in the
 * JavaGrammars Examples directory of JavaCC1_1. It has been
 * modified to accept Java source code for Java 1.2. Basically,
 * this means a new key word was added, 'strictfp', and that keyword
 * added to the appropriate productions and LOOKAHEADs (where other,
 * similar keywords are listed as possible choices). This involved
 * changing 11 lines.
 *
 * Minor changes were also made to the main program for testing.
 *
 * The goal of this effort was for the grammar to be able to parse
 * any legal Java 1.2 source code. It does not reject all illegal
 * cases, but neither did the original. Plus, when it comes to
 * the new 'strictfp' keyword, the Java Compiler from Sun (JDK1.2.1)
 * also does not reject all illegal cases, as defined by the
 * "Updates" document found at
 *       http://java.sun.com/docs/books/jls/strictfp-changes.pdf
 * (see the testcases.txt file for details).
 *
 * David Williams, 7/99
 * ===================================================================
 *
 *
 * Copyright (C) 1996, 1997 Sun Microsystems Inc.
 *
 * Use of this file and the system it is part of is constrained by the
 * file COPYRIGHT in the root directory of this system.  You may, however,
 * make any modifications you wish to this file.
 *
 * Java files generated by running JavaCC on this file (or modified versions
 * of this file) may be used in exactly the same manner as Java files
 * generated from any grammar developed by you.
 *
 * Author: Sriram Sankar
 * Date: 3/5/97
 *
 * This file contains a Java grammar and actions that implement a front-end.
 *
 */

options {
  STATIC = false;
  JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(JavaParser)

import java.util.*;
import java.util.regex.*;
import java.io.File;

public class JavaParser
{
// modified main Andrea Gini 24/02/2002
// modified main. DW, 7/99

    //UN MANAGER D'OBJECT.
    ObjectManager om = new ObjectManager();
    MyJavaFilesManager mjfm = new MyJavaFilesManager();

    public static void main (String [] args) {
        JavaParser parser;
        String filename = "";
        long initTime = 0;
        long parseTime = 0;
        long startTime = 0;
        long stopTime = 0;
        if (args.length == 0)
        {
            System.out.println("Java Parser Version 1.1 (for Java1.4 code):  Reading from standard input . . .");
            parser = new JavaParser(System.in);
        } else if (args.length == 1)
        {
            filename = args[0];
            System.out.println("Java Parser Version 1.1 (for Java1.4 code):  Reading from file " + filename + " . . .");
            /*try
            {*/
                startTime = System.currentTimeMillis();
                parser = new JavaParser(new File(filename));
                stopTime = System.currentTimeMillis();
                initTime = stopTime - startTime;
            /*} catch (java.io.FileNotFoundException e)
            {
                System.out.println("Java Parser Version 1.1 (for Java1.4 code):  File " + filename + " not found.");
                return;
            }*/
        } else
        {
            System.out.println("Java Parser Version 1.1 (for Java1.4 code):  Usage is one of:");
            System.out.println("         java JavaParser < inputfile");
            System.out.println("OR");
            System.out.println("         java JavaParser inputfile");
            return;
        }
        try
        {
            startTime = System.currentTimeMillis();


            //Cr�e un JavaFile pour ce fichier et l'ajoute � l'ObjectManager.
            //JavaFile jf = new JavaFile(filename);
            //parser.om.push(jf);

            //Parse....		    		
            parser.CompilationUnit();


            //Affiche le r�sultat
            parser.showResults();

            stopTime = System.currentTimeMillis();
            parseTime = stopTime - startTime;
            System.out.println("Java Parser Version 1.1 (for Java1.4 code): ");
            System.out.println("   Java program parsed " + filename + " successfully in " + (initTime + parseTime) + " ms.");
            System.out.println("      parser initialization time was " + initTime + " ms.");
            System.out.println("      parser parse time was " + parseTime + " ms.");
        } catch (ParseException e)
        {
            System.out.println(e.getMessage());
            System.out.println("Java Parser Version 1.1 (for Java1.4 code):  Encountered errors during parse.");
        }
    }

	public JavaFile get_javaFile(){
		return (JavaFile)this.om.get(0);
	}

	public JavaParser(File file){
        parseFile(file);
    }
    
    private void parseFile(File file) {
    	File[] children = file.listFiles();
    	
    	if (children != null) {
    		for (File child : children) {
    			parseFile(child);
    		}
    	}
    	else {
    		Pattern pattern = Pattern.compile("^.*[.]java$");
    		if (pattern.matcher(file.getName()).find()) {
	        	java.io.FileInputStream stream = null;
		        try {
		            stream = new java.io.FileInputStream(file);
		        } catch (java.io.FileNotFoundException e) {
		            e.printStackTrace();
		        }
		
		        jj_input_stream = new JavaCharStream(stream, 1, 1);
		        token_source = new JavaParserTokenManager(jj_input_stream);
		        this.ReInit(stream);
		
		        //Cr�e un JavaFile pour ce fichier et l'ajoute � l'ObjectManager.
		        JavaFile jf = new JavaFile(file);
		        this.om.push(jf);
		
		        try {
		            //Compile
		            this.CompilationUnit();
		        } catch (ParseException e) {
		            e.printStackTrace();
		        }
	        }
    	}
    }


	public void showResults(){
		int fileCount = this.om.size();

		//Variables #1
		int privateAttr = 0;
		int publicAttr = 0;
		int protectedAttr = 0;

		//Variables #2
		int primitive = 0;
		int reference = 0;
		String visibilitePerm = "";

		//Variables #3
		String heritageAssoc = "";
		for (int curFile = 0; curFile < fileCount; curFile++) {
			JavaFile javaFile;
            javaFile = (JavaFile) this.om.get(curFile);
			ListIterator i = javaFile.get_classList().listIterator();
            while(i.hasNext()){
                    DescriptionClass c = (DescriptionClass)i.next();
                    visibilitePerm += "Visibilité permanente de la classe " + c.get_Name() + " : \n";
					heritageAssoc += "Classe : " + c.get_Name() + "\n";
					heritageAssoc += "    Héritage : " + (c.get_superClassName() != "" ? c.get_superClassName() : "Aucun") + "\n";
					heritageAssoc += "    Associations : \n";
                    List<Attribute> attrs = c.get_AttributeList();
                    for (Attribute attr: attrs) {

                      	//Numéro 1
                    	if (attr.range.get_Range() == Range.PUBLIC) {
                    		publicAttr++;
                    	}
                    	else if (attr.range.get_Range() == Range.PRIVATE) {
                    		privateAttr++;
                    	}
                    	else if (attr.range.get_Range() == Range.PROTECTED) {
                    		protectedAttr++;
                    	}

                    	//Numéro 2
                    	if (attr.isPrimitive())
						{
						  	primitive++;
						}
						else
						{
						  	reference++;
						  	visibilitePerm += "    " + attr.get_Type() + "\n";
						  	heritageAssoc += "                   - " + attr.get_Type() + "\n";
						}
                    }
            }
		}
		
		double total = privateAttr + publicAttr + protectedAttr;
		
		System.out.println("--------------------");
		System.out.println("Numéro 1");
		System.out.println("--------------------");
		
		System.out.println("% des attributs publics : " + (double)publicAttr / total * 100d);
		System.out.println("% des attributs privés : " + (double)privateAttr / total * 100d);
		System.out.println("% des attributs protégés : " + (double)protectedAttr / total * 100d);

		total = primitive + reference;

		System.out.println("--------------------");
		System.out.println("Numéro 2");
		System.out.println("--------------------");
		
		System.out.println("% des attributs de type simple : " + (double)primitive / total * 100d);
		System.out.println("% des attributs de référence : " + (double)reference / total * 100d);
		System.out.println(visibilitePerm);

		System.out.println("--------------------");
		System.out.println("Numéro 3");
		System.out.println("--------------------");

		System.out.println(heritageAssoc);
	}	
}

PARSER_END(JavaParser)


/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* RESERVED WORDS AND LITERALS */

TOKEN :
{
  < ABSTRACT: "abstract" >
| < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CHAR: "char" >
| < CLASS: "class" >
| < CONST: "const" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < FINAL: "final" >
| < FINALLY: "finally" >
| < FLOAT: "float" >
| < FOR: "for" >
| < GOTO: "goto" >
| < IF: "if" >
| < IMPLEMENTS: "implements" >
| < IMPORT: "import" >
| < INSTANCEOF: "instanceof" >
| < INT: "int" >
| < INTERFACE: "interface" >
| < LONG: "long" >
| < NATIVE: "native" >
| < NEW: "new" >
| < NULL: "null" >
| < PACKAGE: "package">
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < SHORT: "short" >
| < STATIC: "static" >
| < SUPER: "super" >
| < SWITCH: "switch" >
| < SYNCHRONIZED: "synchronized" >
| < THIS: "this" >
| < THROW: "throw" >
| < THROWS: "throws" >
| < TRANSIENT: "transient" >
| < TRUE: "true" >
| < TRY: "try" >
| < VOID: "void" >
| < VOLATILE: "volatile" >
| < WHILE: "while" >
| < STRICTFP: "strictfp" >
// added by Andrea Gini
| < ASSERT: "assert" >
}

/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < RSIGNEDSHIFT: ">>" >
| < RUNSIGNEDSHIFT: ">>>" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
}


/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */

void CompilationUnit() :
{
  JavaFile javaFile = (JavaFile)om.peek();
  MyClass mc = new MyClass();
  mjfm.addClass(mc);
  String temp = "";
}
{

  [ temp = PackageDeclaration() ] {javaFile.set_Package(temp);mjfm.actClass.packageName = temp;}
  ( temp = ImportDeclaration() {javaFile.add_Import(temp);mjfm.actClass.imports.add(temp);} )*
  ( TypeDeclaration() )*
  <EOF>
}

String PackageDeclaration() :
{String strName = "";}
{
  "package" 

 strName = Name() ";"

 {return strName;}    	
}

String ImportDeclaration() :
{String strName = "";}
{
  "import" 

  strName = Name() [ "." "*" {strName += ".*";} ] ";"

  { mjfm.actClass.imports.add(strName);return strName;}
}

void TypeDeclaration() :
{}
{
  LOOKAHEAD( (<ABSTRACT> | <FINAL> | <PUBLIC> | "strictfp" )* <CLASS>)
  //LOOKAHEAD( ( "abstract" | "final" | "public" | "strictfp" )* "class" )
  ClassDeclaration()
|
  InterfaceDeclaration()
|
  ";"
}


/*
 * Declaration syntax follows.
 */

void ClassDeclaration() :
{
  Range range = new Range();
}
{
  ( "abstract" {range.Abstract = true; mjfm.actClass.range.isAbstract = true;} 
   | "final" {range.Final = true; mjfm.actClass.range.isFinal = true;} 
   | "public" {range.set_Range(Range.PUBLIC); mjfm.actClass.range.range = MyRange.PUBLIC;} 
   | "strictfp")*
  UnmodifiedClassDeclaration(range)
}


//=========================================================
// AJOUT D'UNE CLASSE
//=========================================================
void UnmodifiedClassDeclaration(Range r) :
{
  DescriptionClass c = new DescriptionClass();  
  c.range = r;
  Token tNom;
  String strExtends = "";
}
{
  "class" tNom = <IDENTIFIER> [ "extends" strExtends = Name() ] [ "implements" NameList(mjfm.actClass) ]

  //Ajoute la classe � un parent.
  {
   mjfm.actClass.nom = tNom.toString();
   mjfm.actClass.superClass = strExtends;
   c.set_className(tNom.toString());
   c.set_superClassName(strExtends);
   om.addToTopObject(c);
  }

  ClassBody()

  //N'est plus dans une classe
  {
    om.pop();
  }
}

void ClassBody() :
{}
{
  "{" ( ClassBodyDeclaration() )* "}"
}

void NestedClassDeclaration() :
{
  Range range = new Range();
}
{
  ( "static" {range.Static = true; mjfm.actClass.range.isStatic = true;} 
   | "abstract" {range.Abstract = true; mjfm.actClass.range.isAbstract = true;} 
   | "final" {range.Final = true; mjfm.actClass.range.isFinal = true;} 
   | "public" {range.set_Range(Range.PUBLIC); mjfm.actClass.range.range = MyRange.PUBLIC;} 
   | "protected" {range.set_Range(Range.PROTECTED); mjfm.actClass.range.range = MyRange.PRIVATE;} 
   | "private" {range.set_Range(Range.PRIVATE); mjfm.actClass.range.range = MyRange.PROTECTED;} 
   | "strictfp")*
  UnmodifiedClassDeclaration(range)
}

/* Modified by Andrea Gini 2 
 * According rules ClassBody and ClassBodyDeclaration
 * in the Java Language Specification,
 * semi-colons can be duplicated.
 * Source : http://java.sun.com/docs/books/jls/second_edition/html/syntax.doc.html
 */ 

void ClassBodyDeclaration() :
{}
{
  LOOKAHEAD(2)
  Initializer()
|
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" | "strictfp")* "class" )
  NestedClassDeclaration()
|
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" | "strictfp")* "interface" )
  NestedInterfaceDeclaration()
|
  LOOKAHEAD( [ "public" | "protected" | "private" ] Name() "(" )
  ConstructorDeclaration()
|
  LOOKAHEAD( MethodDeclarationLookahead() )
  MethodDeclaration()
|
  FieldDeclaration()
|             // added by Andrea Gini2
  ";"         // added by Andrea Gini2
}

// This production is to determine lookahead only.
void MethodDeclarationLookahead() :
{}
{
  ( "public" | "protected" | "private" | "static" | "abstract" | "final" | "native" | "synchronized" | "strictfp")*
  ResultType() <IDENTIFIER> "("
}

void InterfaceDeclaration() :
{}
{
  ( "abstract" | "public" | "strictfp")*
  UnmodifiedInterfaceDeclaration()
}

void NestedInterfaceDeclaration() :
{}
{
  ( "static" | "abstract" | "final" | "public" | "protected" | "private" | "strictfp")*
  UnmodifiedInterfaceDeclaration()
}

void UnmodifiedInterfaceDeclaration() :
{}
{
  "interface" <IDENTIFIER> [ "extends" NameList(mjfm.actClass) ]
  "{" ( InterfaceMemberDeclaration() )* "}"
}
/* Modified by Andrea Gini 2 
 * According to rules InterfaceBody and InterfaceBodyDeclaration
 * in the Java Language Specification,
 * semi-colons can be duplicated.
 * Source : http://java.sun.com/docs/books/jls/second_edition/html/syntax.doc.html
 */ 
void InterfaceMemberDeclaration() :
{}
{
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" | "strictfp")* "class" )
  NestedClassDeclaration()
|
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" | "strictfp")* "interface" )
  NestedInterfaceDeclaration()
|
  LOOKAHEAD( MethodDeclarationLookahead() )
  MethodDeclaration()
|
  FieldDeclaration()
|             // added by Andrea Gini2
  ";"         // added by Andrea Gini2
}



//=========================================================
// AJOUT D'ATTRIBUTS POUR UNE CLASSE
//=========================================================
void FieldDeclaration() :
{
 Attribute a = new Attribute();
 Range range = new Range();
 a.range = range;
 
 MyAttribut ma = new MyAttribut();

 String strType = "";
 String strName = "";
 String strPrimitiveType = "";
}
{
  ( "public" {range.set_Range(Range.PUBLIC); ma.range.range = MyRange.PUBLIC;} 
   | "protected" {range.set_Range(Range.PROTECTED); ma.range.range = MyRange.PROTECTED;} 
   | "private" {range.set_Range(Range.PRIVATE); ma.range.range = MyRange.PRIVATE;} 
   | "static" {range.Static = true; ma.range.isStatic = true;} 
   | "final" {range.Final = true; ma.range.isFinal = true;} 
   | "transient" 
   | "volatile" )*
 strType = Type() strName = VariableDeclarator()

//AJOUTE LE PREMIER ATTRIBUT
{
 ma.nom = strName;
 ma.type = strType;
 mjfm.actClass.attributs.add(ma);
 a.set_Name(strName);
 a.set_Type(strType);

 //Ajoute � notre manager l'attribut.
 om.addToTopObject(a);
 om.pop(); 			//Enl�ve de la pile...
}


 ( "," strName = VariableDeclarator() 

//AJOUTE LES AUTRES ATTRIBUTS.
{
  a = new Attribute();
  a.range = range;
  a.set_Name(strName);
  a.set_Type(strType);


  //Ajoute � notre manager l'attribut.
  om.addToTopObject(a);
  om.pop(); 			//Enl�ve de la pile...
}

  )* ";"
}

String VariableDeclarator() :
{
 String strResult = "";
}
{
  strResult = VariableDeclaratorId() [ "=" VariableInitializer() ]

  {return strResult;}
}

String VariableDeclaratorId() :
{
  String strResult = "";
  Token tIdent;
}
{
  tIdent = <IDENTIFIER> {strResult = tIdent.toString();} ( "[" {strResult += "[";} "]" {strResult+= "]";} )*

 {return strResult;}
}

void VariableInitializer() :
{}
{
  ArrayInitializer()
|
  Expression()
}

void ArrayInitializer() :
{}
{
  "{" [ VariableInitializer() ( LOOKAHEAD(2) "," VariableInitializer() )* ] [ "," ] "}"
}

void MethodDeclaration() :
{
 Method m;
 MyMethod mm = new MyMethod();
 String strResult = "";
 Range range = new Range();
}
{
  ( "public" {range.set_Range(Range.PUBLIC); mm.range.range = MyRange.PUBLIC;} 
   | "protected" {range.set_Range(Range.PROTECTED); mm.range.range = MyRange.PROTECTED;} 
   | "private" {range.set_Range(Range.PRIVATE); mm.range.range = MyRange.PRIVATE;} 
   | "static" {range.Static = true; mm.range.isStatic = true;} 
   | "abstract" {range.Abstract = true; mm.range.isAbstract = true;} 
   | "final" {range.Final = true; mm.range.isFinal = true;} 
   | "native" | "synchronized" | "strictfp")*
  strResult = ResultType() m = MethodDeclarator(mm) [ "throws" NameListThrows(mm) ]
  ( 
   //On est dans la m�thode....
   {
   	mm.returnType = strResult;
    mjfm.actClass.methods.add(mm);
    m.set_returnType(strResult);
    m.range = range;
    om.addToTopObject(m);
   }
   Block()
   //On n'est plus dans la m�thode.... 
   {om.pop();}
  | ";" )
}

Method MethodDeclarator(MyMethod mm) :
{
 Method m = new Method();
 Token tName;
}
{
  tName = <IDENTIFIER> {m.set_Name(tName.toString()); mm.nom = tName.toString();} 
  FormalParameters(mm) ( "[" "]" )*

 {return m;}
}

void FormalParameters(MyMethod mm) :
{}
{
  "(" [ FormalParameter(mm) ( "," FormalParameter(mm) )* ] ")"
}

void FormalParameter(MyMethod mm) :
{
	MyAttribut a = new MyAttribut();
	mm.parameters.add(a);
	String str;
}
{
  [ "final" {a.range.isFinal = true;} ] 
  str = Type() {a.type = str;} 
  str = VariableDeclaratorId() {a.nom = str;}
}

void ConstructorDeclaration() :
{
	MyMethod mm = new MyMethod();
	mm.nom = mjfm.actClass.nom;
	mjfm.actClass.methods.add(mm);
	
}
{
  [ "public" {mm.range.range = MyRange.PUBLIC;} 
   | "protected" {mm.range.range = MyRange.PROTECTED;}
   | "private" {mm.range.range = MyRange.PRIVATE;}
  ]
  <IDENTIFIER> FormalParameters(mm) [ "throws" NameListThrows(mm) ]
  "{"
    [ LOOKAHEAD(ExplicitConstructorInvocation()) ExplicitConstructorInvocation() ]
    ( BlockStatement() )*
  "}"
}

void ExplicitConstructorInvocation() :
{}
{
  LOOKAHEAD("this" Arguments() ";")
  "this" Arguments() ";"
|
  [ LOOKAHEAD(2) PrimaryExpression() "." ] "super" Arguments() ";"
}

void Initializer() :
{}
{
  [ "static" ] Block()
}


/*
 * Type, name and expression syntax follows.
 */

String Type() :
{
  String strReturn = "";
}
{
  ( strReturn = PrimitiveType() | strReturn = Name() ) ( "[" {strReturn += "[";}  "]" {strReturn += "]";} )*
  {return strReturn;}
}

String PrimitiveType() :
{
 String strReturn = "";
}
{
  ("boolean"
   {strReturn = "boolean";}
|
  "char"
   {strReturn = "char";}
|
  "byte"
   {strReturn = "byte";}
|
  "short"
   {strReturn = "short";}
|
  "int"
   {strReturn = "int";}
|
  "long"
   {strReturn = "long";}
|
  "float"
   {strReturn = "float";}
|
  "double"
   {strReturn = "double";})

 {return strReturn;}
}

String ResultType() :
{
  String strReturn = "";
}
{
 ( "void"
   {strReturn = "void";}
|
  strReturn = Type())

 {return strReturn;}
}

String Name() :
/*
 * A lookahead of 2 is required below since "Name" can be followed
 * by a ".*" when used in the context of an "ImportDeclaration".
 */
{Token tValeur, tTemp;
 String strValeur = "";
}
{
  tValeur = <IDENTIFIER>
  {strValeur = tValeur.toString();}
  ( LOOKAHEAD(2) "." tTemp = <IDENTIFIER> {strValeur += "." + tTemp.toString();}
  )*

  {return strValeur;}
}

void NameList(MyClass c) :
{String str = null;}
{
  str = Name() {c.interfaces.add(str);System.out.println("#"+str+"#");} 
  ( "," str = Name() {c.interfaces.add(str);})*
}

void NameListThrows(ThrowAble ta) :
{String str = null;}
{
  str = Name() { ta.addThrowException(str);}
  ( "," str = Name() { ta.addThrowException(str);})*
}

/*
 * Expression syntax follows.
 */

void Expression() :
/*
 * This expansion has been written this way instead of:
 *   Assignment() | ConditionalExpression()
 * for performance reasons.
 * However, it is a weakening of the grammar for it allows the LHS of
 * assignments to be any conditional expression whereas it can only be
 * a primary expression.  Consider adding a semantic predicate to work
 * around this.
 */
{}
{
  ConditionalExpression()
  [
    AssignmentOperator() Expression()
  ]
}

void AssignmentOperator() :
{}
{
  "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|="
}

void ConditionalExpression() :
{}
{
  ConditionalOrExpression() [ "?" Expression() ":" ConditionalExpression() ]
}

void ConditionalOrExpression() :
{}
{
  ConditionalAndExpression() ( "||" ConditionalAndExpression() )*
}

void ConditionalAndExpression() :
{}
{
  InclusiveOrExpression() ( "&&" InclusiveOrExpression() )*
}

void InclusiveOrExpression() :
{}
{
  ExclusiveOrExpression() ( "|" ExclusiveOrExpression() )*
}

void ExclusiveOrExpression() :
{}
{
  AndExpression() ( "^" AndExpression() )*
}

void AndExpression() :
{}
{
  EqualityExpression() ( "&" EqualityExpression() )*
}

void EqualityExpression() :
{}
{
  InstanceOfExpression() ( ( "==" | "!=" ) InstanceOfExpression() )*
}

void InstanceOfExpression() :
{}
{
  RelationalExpression() [ "instanceof" Type() ]
}

void RelationalExpression() :
{}
{
  ShiftExpression() ( ( "<" | ">" | "<=" | ">=" ) ShiftExpression() )*
}

void ShiftExpression() :
{}
{
  AdditiveExpression() ( ( "<<" | ">>" | ">>>" ) AdditiveExpression() )*
}

void AdditiveExpression() :
{}
{
  MultiplicativeExpression() ( ( "+" | "-" ) MultiplicativeExpression() )*
}

void MultiplicativeExpression() :
{}
{
  UnaryExpression() ( ( "*" | "/" | "%" ) UnaryExpression() )*
}

void UnaryExpression() :
{}
{
  ( "+" | "-" ) UnaryExpression()
|
  PreIncrementExpression()
|
  PreDecrementExpression()
|
  UnaryExpressionNotPlusMinus()
}

void PreIncrementExpression() :
{}
{
  "++" PrimaryExpression()
}

void PreDecrementExpression() :
{}
{
  "--" PrimaryExpression()
}

void UnaryExpressionNotPlusMinus() :
{}
{
  ( "~" | "!" ) UnaryExpression()
|
  LOOKAHEAD( CastLookahead() )
  CastExpression()
|
  PostfixExpression()
}

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
void CastLookahead() :
{}
{
  LOOKAHEAD(2)
  "(" PrimitiveType()
|
  LOOKAHEAD("(" Name() "[")
  "(" Name() "[" "]"
|
  "(" Name() ")" ( "~" | "!" | "(" | <IDENTIFIER> | "this" | "super" | "new" | Literal() )
}

void PostfixExpression() :
{}
{
  PrimaryExpression() [ "++" | "--" ]
}

void CastExpression() :
{}
{
  LOOKAHEAD("(" PrimitiveType())
  "(" Type() ")" UnaryExpression()
|
  "(" Type() ")" UnaryExpressionNotPlusMinus()
}

void PrimaryExpression() :
{}
{
  PrimaryPrefix() ( LOOKAHEAD(2) PrimarySuffix() )*
}

void PrimaryPrefix() :
{}
{
  Literal()
|
  "this"
|
  "super" "." <IDENTIFIER>
|
  "(" Expression() ")"
|
  AllocationExpression()
|
  LOOKAHEAD( ResultType() "." "class" )
  ResultType() "." "class"
|
  Name()
}

/* Add "." "super" to be compatible with Java 1.2, 
 * Modified by Marco Savard
 */ 
void PrimarySuffix() :
{}
{
  LOOKAHEAD(2)
  "." "this"
|
  LOOKAHEAD(2)
  "." "super"  
|
  LOOKAHEAD(2)
  "." AllocationExpression()
|
  "[" Expression() "]"
|
  "." <IDENTIFIER>
|
  Arguments()
}

void Literal() :
{}
{
  <INTEGER_LITERAL>
|
  <FLOATING_POINT_LITERAL>
|
  <CHARACTER_LITERAL>
|
  <STRING_LITERAL>
|
  BooleanLiteral()
|
  NullLiteral()
}

void BooleanLiteral() :
{}
{
  "true"
|
  "false"
}

void NullLiteral() :
{}
{
  "null"
}

void Arguments() :
{}
{
  "(" [ ArgumentList() ] ")"
}

void ArgumentList() :
{}
{
  Expression() ( "," Expression() )*
}

void AllocationExpression() :
{}
{
  LOOKAHEAD(2)
  "new" PrimitiveType() ArrayDimsAndInits()
|
  "new" Name()
    (
      ArrayDimsAndInits()
    |
      Arguments() [ ClassBody() ]
    )
}

/*
 * The second LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
void ArrayDimsAndInits() :
{}
{
  LOOKAHEAD(2)
  ( LOOKAHEAD(2) "[" Expression() "]" )+ ( LOOKAHEAD(2) "[" "]" )*
|
  ( "[" "]" )+ ArrayInitializer()
}


/*
 * Statement syntax follows.
 */

void Statement() :
{}
{
  LOOKAHEAD(2)
  LabeledStatement()
|
  Block()
|
  EmptyStatement()
|
  StatementExpression() ";"
|
  SwitchStatement()
|
  IfStatement()
|
  WhileStatement()
|
  DoStatement()
|
  ForStatement()
|
  BreakStatement()
|
  ContinueStatement()
|
  ReturnStatement()
|
  ThrowStatement()
|
  SynchronizedStatement()
|
  TryStatement()
// added by Andrea Gini
|
  AssertStatement()
}

void LabeledStatement() :
{}
{
  <IDENTIFIER> ":" Statement()
}

void Block() :
{}
{
  "{" ( BlockStatement() )* "}"
}

void BlockStatement() :
{}
{
  LOOKAHEAD([ "final" ] Type() <IDENTIFIER>)
  LocalVariableDeclaration() ";"
|
  Statement()
|
  UnmodifiedClassDeclaration(new Range())
|
  UnmodifiedInterfaceDeclaration()
}


//=========================================================
// AJOUT D'UN ATTRIBUT LOCAL
//=========================================================
void LocalVariableDeclaration() :
{
 Attribute a = new Attribute();
 Range range = new Range();
 range.set_Range(Range.PUBLIC);
 a.range = range;

 String strType = "";
 String strId = "";
}
{
  [ "final" {range.Final = true;} ] strType = Type() strId = VariableDeclarator() 

//Ajoute l'attribu � la structure parente
{
  a.set_Name(strId);
  a.set_Type(strType);
  om.addToTopObject(a);
  om.pop();
}



( "," strId = VariableDeclarator() 


//Ajoute l'attribu � la structure parente
{
  a = new Attribute();
  a.range = range;
  a.set_Name(strId);
  a.set_Type(strType);
  om.addToTopObject(a);
  om.pop();
}

)*
}

void EmptyStatement() :
{}
{
  ";"
}

void StatementExpression() :
/*
 * The last expansion of this production accepts more than the legal
 * Java expansions for StatementExpression.  This expansion does not
 * use PostfixExpression for performance reasons.
 */
{}
{
  PreIncrementExpression()
|
  PreDecrementExpression()
|
  PrimaryExpression()
  [
    "++"
  |
    "--"
  |
    AssignmentOperator() Expression()
  ]
}

void SwitchStatement() :
{}
{
  "switch" "(" Expression() ")" "{"
    ( SwitchLabel() ( BlockStatement() )* )*
  "}"
}

void SwitchLabel() :
{}
{
  "case" Expression() ":"
|
  "default" ":"
}

void IfStatement() :
/*
 * The disambiguating algorithm of JavaCC automatically binds dangling
 * else's to the innermost if statement.  The LOOKAHEAD specification
 * is to tell JavaCC that we know what we are doing.
 */
{}
{
  "if" "(" Expression() ")" Statement() [ LOOKAHEAD(1) "else" Statement() ]
}

void WhileStatement() :
{}
{
  "while" "(" Expression() ")" Statement()
}

void DoStatement() :
{}
{
  "do" Statement() "while" "(" Expression() ")" ";"
}

void ForStatement() :
{}
{
  "for" "(" [ ForInit() ] ";" [ Expression() ] ";" [ ForUpdate() ] ")" Statement()
}

void ForInit() :
{}
{
  LOOKAHEAD( [ "final" ] Type() <IDENTIFIER> )
  LocalVariableDeclaration()
|
  StatementExpressionList()
}

void StatementExpressionList() :
{}
{
  StatementExpression() ( "," StatementExpression() )*
}

void ForUpdate() :
{}
{
  StatementExpressionList()
}

void BreakStatement() :
{}
{
  "break" [ <IDENTIFIER> ] ";"
}

void ContinueStatement() :
{}
{
  "continue" [ <IDENTIFIER> ] ";"
}

void ReturnStatement() :
{}
{
  "return" [ Expression() ] ";"
}

void ThrowStatement() :
{}
{
  "throw" Expression() ";"
}

void SynchronizedStatement() :
{}
{
  "synchronized" "(" Expression() ")" Block()
}

void TryStatement() :
/*
 * Semantic check required here to make sure that at least one
 * finally/catch is present.
 */
{}
{
  "try" Block()
  ( "catch" "(" FormalParameter(new MyMethod()) ")" Block() )*
  [ "finally" Block() ]
}

// added by Andrea Gini
void AssertStatement() :
{}
{
   "assert" Expression() [ ":" Expression() ] ";"
}
